{"version":3,"file":"index.js","sources":["../ModalPortal.tsx","../ModalBackdrop/index.tsx","../BaseModal.tsx","../CenterModal/index.tsx","../BottomModal/index.tsx"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\n\ninterface IProps {\n  children?: JSX.Element | JSX.Element[] | Array<JSX.Element | null>;\n}\n\nconst modalRoot = globalThis.document\n  ? document.querySelector('#modal-root')\n  : null;\n\nfunction ModalPortal({ children }: IProps) {\n  const node = useMemo(\n    () => (globalThis.document ? document.createElement('div') : null),\n    []\n  );\n\n  useEffect(() => {\n    if (modalRoot && node) {\n      modalRoot.appendChild(node);\n    }\n    return () => {\n      if (modalRoot && node) {\n        modalRoot.removeChild(node);\n      }\n    };\n  }, [node]);\n\n  return node ? createPortal(children, node) : null;\n}\n\nexport default ModalPortal;\n","import React, { forwardRef, useCallback } from 'react';\nimport { animated } from 'react-spring';\nimport './style.css';\n\nfunction ModalBackdrop({ className, onClick, ...props }: any, ref: any) {\n  const handleClick = useCallback(\n    event => {\n      if (ref.current === event.target) {\n        onClick(event);\n      }\n    },\n    [onClick, ref]\n  );\n\n  return (\n    <animated.div\n      ref={ref}\n      onClick={handleClick}\n      className={['ModalBackdrop', className].join(' ')}\n      {...props}\n    />\n  );\n}\n\nexport default forwardRef(ModalBackdrop);\n","import React, { ReactNode, useEffect, useRef } from 'react';\nimport { useTransition } from 'react-spring';\nimport ModalBackdrop from './ModalBackdrop';\nimport ModalPortal from './ModalPortal';\n\nimport useLockBodyScroll from 'react-use/lib/useLockBodyScroll';\n\nif (globalThis.document) {\n  require('wicg-inert');\n}\n\nlet root: HTMLElement | null = null;\nif (globalThis.document) {\n  root = document.getElementById('root');\n  if (!root) {\n    root = document.getElementById('__next');\n  }\n}\n\nfunction getFocusable(element: HTMLElement): NodeListOf<HTMLElement> {\n  return element.querySelectorAll(\n    'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n  );\n}\n\nexport interface IBaseModalProps {\n  children: ReactNode;\n  isOpen: boolean;\n  onRequestClose: () => void;\n  enableFocusOnReady?: boolean\n}\n\nfunction BaseModal({ isOpen, onRequestClose, enableFocusOnReady = true, children }: IBaseModalProps) {\n  useLockBodyScroll(isOpen);\n\n  const lastActiveElement = useRef<HTMLElement | null>(null);\n  const modalRef = useRef<HTMLElement>(null);\n\n  const backdropTransition = useTransition(isOpen, null, {\n    '--opacity': 0,\n    from: { '--opacity': 0 },\n    enter: { '--opacity': 0.5 },\n    leave: { '--opacity': 0 },\n    onRest() {\n      if (modalRef.current && isOpen && enableFocusOnReady) {\n        const focusableElements = getFocusable(modalRef.current);\n        if (focusableElements.length) {\n          focusableElements[0].focus();\n        }\n      }\n    }\n  });\n\n  // Close on Escape\n  useEffect(() => {\n    function listener(event: KeyboardEvent) {\n      if (event.key === 'Escape') {\n        onRequestClose();\n      }\n    }\n    if (globalThis.window) {\n      window.addEventListener('keyup', listener);\n    }\n\n    return () => {\n      if (globalThis.window) {\n        window.removeEventListener('keyup', listener);\n      }\n    };\n  }, [onRequestClose]);\n\n  useEffect(() => {\n    if (isOpen) {\n      if (globalThis.document) {\n        lastActiveElement.current = document.activeElement as HTMLElement;\n      }\n\n      if (root) {\n        root.setAttribute('inert', '');\n      }\n    } else {\n      if (root) {\n        root.removeAttribute('inert');\n      }\n\n      // wait for inert to wear off then focus\n      setTimeout(() => {\n        if (lastActiveElement.current) {\n          lastActiveElement.current.focus();\n        }\n      }, 0);\n    }\n  }, [isOpen]);\n\n  return (\n    <ModalPortal>\n      {backdropTransition.map(backdrop =>\n        backdrop.item ? (\n          <ModalBackdrop\n            key={backdrop.key}\n            className=\"BottomModal__backdrop\"\n            style={backdrop.props}\n            onClick={onRequestClose}\n            aria-modal=\"true\"\n            role=\"dialog\"\n            ref={modalRef}\n          >\n            {children}\n          </ModalBackdrop>\n        ) : null\n      )}\n    </ModalPortal>\n  );\n}\n\nexport default BaseModal;\n","import React from 'react';\nimport { useTransition, animated } from 'react-spring';\nimport { ObjectOf } from '../generic-types';\nimport BaseModal, { IBaseModalProps } from '../BaseModal';\n\nimport './style.css';\n\ninterface IProps extends IBaseModalProps, ObjectOf<any> {\n  modalTransition?: ReturnType<typeof useTransition>;\n}\n\nexport function useCenterModalTransition(\n  isOpen: boolean,\n  props: ObjectOf<any> = {}\n) {\n  return useTransition(isOpen, null, {\n    // @ts-ignore\n    from: { opacity: 0 },\n    // @ts-ignore\n    enter: { opacity: 1 },\n    // @ts-ignore\n    leave: { opacity: 0 },\n    ...props\n  });\n}\n\nfunction CenterModal({\n  isOpen,\n  onRequestClose,\n  className,\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  modalTransition = useCenterModalTransition(isOpen),\n  style = {},\n  ...props\n}: IProps) {\n  return (\n    <BaseModal isOpen={isOpen} onRequestClose={onRequestClose}>\n      {modalTransition.map(({ item, key, props: transitionStyles }) =>\n        item ? (\n          <animated.div\n            key={key}\n            style={{ ...transitionStyles, ...style }}\n            className={['CenterModal shadow-lg', className].join(' ')}\n            {...props}\n          />\n        ) : null\n      )}\n    </BaseModal>\n  );\n}\n\nexport default CenterModal;\n","import React from 'react';\nimport { animated, useTransition } from 'react-spring';\nimport BaseModal, { IBaseModalProps } from '../BaseModal';\n\nimport { ObjectOf } from '../generic-types';\nimport './style.css';\n\ninterface IProps extends IBaseModalProps, ObjectOf<any> {\n  modalTransition?: ReturnType<typeof useTransition>;\n}\n\nexport function useBottomModalTransition(\n  isOpen: boolean,\n  props: ObjectOf<any> = {}\n) {\n  return useTransition(isOpen, null, {\n    // @ts-ignore\n    from: { transform: 'translateY(100%) translateX(-50%)' },\n    // @ts-ignore\n    enter: { transform: 'translateY(0%) translateX(-50%)' },\n    // @ts-ignore\n    leave: { transform: 'translateY(100%) translateX(-50%)' },\n    ...props\n  });\n}\n\nfunction BottomModal({\n  children,\n  isOpen,\n  onRequestClose,\n  className,\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  modalTransition = useBottomModalTransition(isOpen),\n  style = {},\n  ...props\n}: IProps) {\n  return (\n    <BaseModal isOpen={isOpen} onRequestClose={onRequestClose}>\n      {modalTransition.map(({ item, key, props: transitionStyles }) =>\n        item ? (\n          <animated.div\n            className={['BottomModal', 'shadow-lg', className].join(' ')}\n            key={key}\n            style={{ ...transitionStyles, ...style }}\n            {...props}\n          >\n            {children}\n          </animated.div>\n        ) : null\n      )}\n    </BaseModal>\n  );\n}\n\nexport default BottomModal;\n"],"names":["modalRoot","globalThis","document","querySelector","ModalPortal","node","useMemo","createElement","useEffect","appendChild","removeChild","createPortal","children","forwardRef","ref","handleClick","useCallback","event","current","target","onClick","React","animated","div","className","join","props","require","let","root","BaseModal","useLockBodyScroll","isOpen","lastActiveElement","useRef","modalRef","backdropTransition","useTransition","from","enter","leave","onRest","enableFocusOnReady","focusableElements","querySelectorAll","length","focus","listener","key","onRequestClose","window","addEventListener","removeEventListener","activeElement","setAttribute","removeAttribute","setTimeout","map","backdrop","item","ModalBackdrop","style","aria-modal","role","getElementById","Object","opacity","useCenterModalTransition","modalTransition","transform","useBottomModalTransition","transitionStyles"],"mappings":"qMAOMA,EAAYC,WAAWC,SACzBA,SAASC,cAAc,eACvB,KAEJ,SAASC,sBACDC,EAAOC,4BACJL,WAAWC,SAAWA,SAASK,cAAc,OAAS,MAC7D,WAGFC,8BACMR,GAAaK,GACfL,EAAUS,YAAYJ,cAGlBL,GAAaK,GACfL,EAAUU,YAAYL,KAGzB,CAACA,IAEGA,EAAOM,eAAaC,EAAUP,GAAQ,KCJ/C,MAAeQ,aApBf,WAA8DC,wLACtDC,EAAcC,uBAClBC,GACMH,EAAII,UAAYD,EAAME,QACxBC,EAAQH,IAGZ,CAACG,EAASN,WAIVO,gBAACC,WAASC,sBACRT,IAAKA,EACLM,QAASL,EACTS,UAAW,CAAC,gBAAiBA,GAAWC,KAAK,MACzCC,MCZNzB,WAAWC,UACbyB,QAAQ,cAGVC,IAAIC,EAA2B,KAqB/B,SAASC,8EAAyD,oBAChEC,EAAkBC,OAEZC,EAAoBC,SAA2B,MAC/CC,EAAWD,SAAoB,MAE/BE,EAAqBC,gBAAcL,EAAQ,KAAM,aACxC,EACbM,KAAM,aAAe,GACrBC,MAAO,aAAe,IACtBC,MAAO,aAAe,GACtBC,qBACMN,EAASjB,SAAWc,GAAUU,EAAoB,KAC9CC,EAAiCR,EAASjB,QAzBvC0B,iBACb,4EAyBQD,EAAkBE,QACpBF,EAAkB,GAAGG,mBAO7BtC,gCACWuC,EAAS9B,GACE,WAAdA,EAAM+B,KACRC,WAGAhD,WAAWiD,QACbA,OAAOC,iBAAiB,QAASJ,cAI7B9C,WAAWiD,QACbA,OAAOE,oBAAoB,QAASL,KAGvC,CAACE,IAEJzC,uBACMwB,GACE/B,WAAWC,WACb+B,EAAkBf,QAAUhB,SAASmD,eAGnCxB,GACFA,EAAKyB,aAAa,QAAS,MAGzBzB,GACFA,EAAK0B,gBAAgB,SAIvBC,sBACMvB,EAAkBf,SACpBe,EAAkBf,QAAQ4B,SAE3B,KAEJ,CAACd,IAGFX,gBAACjB,OACEgC,EAAmBqB,aAAIC,UACtBA,EAASC,KACPtC,gBAACuC,GACCZ,IAAKU,EAASV,IACdxB,UAAU,wBACVqC,MAAOH,EAAShC,MAChBN,QAAS6B,EACTa,aAAW,OACXC,KAAK,SACLjD,IAAKqB,GAEJvB,GAED,QAjGRX,WAAWC,YACb2B,EAAO3B,SAAS8D,eAAe,WAE7BnC,EAAO3B,SAAS8D,eAAe,kGCWnC,wGAdEhC,EACAN,yBAAuB,IAEhBW,gBAAcL,EAAQ,KAAMiC,kBAEjC3B,KAAM,CAAE4B,QAAS,GAEjB3B,MAAO,CAAE2B,QAAS,GAElB1B,MAAO,CAAE0B,QAAS,IACfxC,IASayC,CAAyBnC,iCACnC,gNAINX,gBAACS,GAAUE,OAAQA,EAAQiB,eAAgBA,GACxCmB,EAAgBX,8BAEbpC,gBAACC,WAASC,sBACRyB,UACAa,MAAOI,yBAA0BJ,GACjCrC,UAAW,CAAC,wBAAyBA,GAAWC,KAAK,MACjDC,IAEJ,6BCnBZ,qHAdEM,EACAN,yBAAuB,IAEhBW,gBAAcL,EAAQ,KAAMiC,kBAEjC3B,KAAM,CAAE+B,UAAW,qCAEnB9B,MAAO,CAAE8B,UAAW,mCAEpB7B,MAAO,CAAE6B,UAAW,sCACjB3C,IAUa4C,CAAyBtC,iCACnC,2NAINX,gBAACS,GAAUE,OAAQA,EAAQiB,eAAgBA,GACxCmB,EAAgBX,oDAEbpC,gBAACC,WAASC,sBACRC,UAAW,CAAC,cAAe,YAAaA,GAAWC,KAAK,KACxDuB,IAAKA,EACLa,MAAOI,iBAAKM,EAAqBV,IAC7BnC,GAEHd,GAED"}